__halt_compiler
abstract
and
array()
as
break
callable
case
catch
class;
clone
const
continue
declare
default
die
do
echo
else
elseif
empty
enddeclare
endfor
endforeach
endif
endswitch
endwhile
eval
exit
extends;
final
finally
fn
for
foreach
function
global
goto
if
implements;
include
include_once
instanceof;
insteadof
interface;
isset
list
namespace;
match
new;
or
parent
parent::;
print
private
protected
public
require
require_once
return
self
new self
self::;
static
static::;
switch
throw
trait;
try
unset
use;
var
while
xor
yield
yield from

----------------------------------------------------

[
	["keyword", "__halt_compiler"],
	["keyword", "abstract"],
	["keyword", "and"],
	["keyword", "array"], ["punctuation", "("], ["punctuation", ")"],
	["keyword", "as"],
	["keyword", "break"],
	["keyword", "callable"],
	["keyword", "case"],
	["keyword", "catch"],
	["keyword", "class"], ["punctuation", ";"],
	["keyword", "clone"],
	["keyword", "const"],
	["keyword", "continue"],
	["keyword", "declare"],
	["keyword", "default"],
	["keyword", "die"],
	["keyword", "do"],
	["keyword", "echo"],
	["keyword", "else"],
	["keyword", "elseif"],
	["keyword", "empty"],
	["keyword", "enddeclare"],
	["keyword", "endfor"],
	["keyword", "endforeach"],
	["keyword", "endif"],
	["keyword", "endswitch"],
	["keyword", "endwhile"],
	["keyword", "eval"],
	["keyword", "exit"],
	["keyword", "extends"], ["punctuation", ";"],
	["keyword", "final"],
	["keyword", "finally"],
	["keyword", "fn"],
	["keyword", "for"],
	["keyword", "foreach"],
	["keyword", "function"],
	["keyword", "global"],
	["keyword", "goto"],
	["keyword", "if"],
	["keyword", "implements"], ["punctuation", ";"],
	["keyword", "include"],
	["keyword", "include_once"],
	["keyword", "instanceof"], ["punctuation", ";"],
	["keyword", "insteadof"],
	["keyword", "interface"], ["punctuation", ";"],
	["keyword", "isset"],
	["keyword", "list"],
	["keyword", "namespace"], ["punctuation", ";"],
	["keyword", "match"],
	["keyword", "new"], ["punctuation", ";"],
	["keyword", "or"],
	["keyword", "parent"],
	["keyword", "parent"], ["operator", "::"], ["punctuation", ";"],
	["keyword", "print"],
	["keyword", "private"],
	["keyword", "protected"],
	["keyword", "public"],
	["keyword", "require"],
	["keyword", "require_once"],
	["keyword", "return"],
	["keyword", "self"],
	["keyword", "new"], ["keyword", "self"],
	["keyword", "self"], ["operator", "::"], ["punctuation", ";"],
	["keyword", "static"],
	["keyword", "static"], ["operator", "::"], ["punctuation", ";"],
	["keyword", "switch"],
	["keyword", "throw"],
	["keyword", "trait"], ["punctuation", ";"],
	["keyword", "try"],
	["keyword", "unset"],
	["keyword", "use"], ["punctuation", ";"],
	["keyword", "var"],
	["keyword", "while"],
	["keyword", "xor"],
	["keyword", "yield"],
	["keyword", "yield"], ["keyword", "from"]
]

----------------------------------------------------

Checks for keywords.
