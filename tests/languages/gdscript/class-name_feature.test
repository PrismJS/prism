class_name Foo
extends Bar

class InnerClass:

return foo as Node

const FOO: int = 9
var bar: bool = true

func add(reference: Item, amount: int) -> Item:

Array[MyClass]
Dictionary[FirstClass, SecondClass]

----------------------------------------------------

[
	["keyword", "class_name"], ["class-name", "Foo"],
	["keyword", "extends"], ["class-name", "Bar"],

	["keyword", "class"], ["class-name", "InnerClass"], ["punctuation", ":"],

	["control-flow", "return"], " foo ", ["operator-word", "as"], ["builtin-object", "Node"],

	["keyword", "const"],
	["constant", "FOO"],
	["punctuation", ":"],
	["builtin-type", "int"],
	["operator", "="],
	["number", "9"],

	["keyword", "var"],
	" bar",
	["punctuation", ":"],
	["builtin-type", "bool"],
	["operator", "="],
	["builtin-pseudo", "true"],

	["keyword", "func"],
	["function-definition", "add"],
	["punctuation", "("],
	"reference",
	["punctuation", ":"],
	["class-name", "Item"],
	["punctuation", ","],
	" amount",
	["punctuation", ":"],
	["builtin-type", "int"],
	["punctuation", ")"],
	["operator", "->"],
	["class-name", "Item"],
	["punctuation", ":"],
	
	["typed-array", [
		["builtin-type", "Array"],
		["punctuation", "["],
		["class-name", "MyClass"],
		["punctuation", "]"]
	]],
	["typed-dict", [
		["builtin-type", "Dictionary"],
		["punctuation", "["],
		["class-name", "FirstClass"],
		["punctuation", ","],
		["class-name", "SecondClass"],
		["punctuation", "]"]
	]]
]

----------------------------------------------------

Checks for class names.
