and
as
assert
await
break
breakpoint
class
class_name
const
continue
elif
else
enum
extends
for
func
get
if
in
is
match
namespace
not
null
or
pass
preload
return
self
set
signal
static
super
trait
var
when
while
yield

----------------------------------------------------

[
	["operator-word", "and"],
	["operator-word", "as"],
	["builtin", "assert"],
	["keyword", "await"],
	["control-flow", "break"],
	["keyword", "breakpoint"],
	["keyword", "class"],
	["keyword", "class_name"],
	["keyword", "const"],
	["control-flow", "continue"],
	["control-flow", "elif"],
	["control-flow", "else"],
	["keyword", "enum"],
	["keyword", "extends"],
	["control-flow", "for"],
	["keyword", "func"],
	["setget", "get"],
	["control-flow", "if"],
	["operator-word", "in"],
	["operator-word", "is"],
	["control-flow", "match"],
	["keyword", "namespace"],
	["operator-word", "not"],
	["builtin-pseudo", "null"],
	["operator-word", "or"],
	["control-flow", "pass"],
	["builtin", "preload"],
	["control-flow", "return"],
	["keyword", "self"],
	["setget", "set"],
	["keyword", "signal"],
	["keyword", "static"],
	["keyword", "super"],
	["keyword", "trait"],
	["keyword", "var"],
	["control-flow", "when"],
	["control-flow", "while"],
	["keyword", "yield"]
]

----------------------------------------------------

Checks for keywords and control-flow keywords.
