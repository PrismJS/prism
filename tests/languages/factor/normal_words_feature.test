commas, primes'
set-x
change-x
with-x
new-x
>string
base>
string>number
+symbol+
que?
?of
?of*
reader>>
>>setter
writer<<
(detail)
mutater!
variant*
prettyprint.
$help

"no

----------------------------------------------------

[
	[ "normal-word", "commas," ],
	[ "normal-word", "primes'" ],
	[ "conventionally-named-word", "set-x" ],
	[ "conventionally-named-word", "change-x" ],
	[ "conventionally-named-word", "with-x" ],
	[ "conventionally-named-word", "new-x" ],
	[ "conventionally-named-word", ">string" ],
	[ "conventionally-named-word", "base>" ],
	[ "conventionally-named-word", "string>number" ],
	[ "conventionally-named-word", "+symbol+" ],
	[ "conventionally-named-word", "que?" ],
	[ "conventionally-named-word", "?of" ],
	[ "conventionally-named-word", "?of*" ],
	[ "conventionally-named-word", "reader>>" ],
	[ "conventionally-named-word", ">>setter" ],
	[ "conventionally-named-word", "writer<<" ],
	[ "conventionally-named-word", "(detail)" ],
	[ "conventionally-named-word", "mutater!" ],
	[ "conventionally-named-word", "variant*" ],
	[ "conventionally-named-word", "prettyprint." ],
	[ "conventionally-named-word", "$help" ],
	"\r\n\r\n\"no"
]

----------------------------------------------------

"Normal" words are not builtin well-known ones like "not", "and", "<=>", though they may be in the standard library or user-defined.
They may start with any character except `"` (double-quote), but may contain or end with double-quotes or any other non-whitespace character.

Conventionally named words follow the conventions outlined in prism-factor.js.
